HowTo edit DIA documentation in VuePress

GENERAL USE
All content can be edited using markdown: https://markdown-it.github.io/
This is the markdown renderer VuePress uses, with more documentation: https://github.com/markdown-it/markdown-it
For VuePress, there is a great documentation here: https://v1.vuepress.vuejs.org/

On top of that, there are only a few special things that are important, basically about navigation and custom components:

---

NAVIGATION
For now there are three navigation elements:

Header-Navigatin and Side Bar Navigation
Both are in "vuepress-docs/vuepress-docs/docs/src/.vuepress/config.js"
- Header: themeConfig.nav
- Sidebar: themeConfig.sidebar

Caution: editing is tricky, especially the sidebar needs to be handled with care. 
For the sidebar its important to understand that the file structure in vuepress-docs/vuepress-docs/docs/src does NOT match the navigation structure automatically, as the navigation structure can be configured in "config.js" in many different ways (for ecample including headlines in files). The initial setup of the documentation however follows the pattern "one file for each page" and those files are located in folders which hopefully make it easy to find the right file for each page.

Footer
TODO: For now, we work with the component "ComponentFooter.vue" as a reusable footer, as "slots" dont seem to work (need to be re-defined in every markdown file). This should be re-considered, we should check the templating feature for that. For usage of components see below

---

STYLING
CSS can be applied individually but should rather be implemented either globally (in vuepress-docs/vuepress-docs/docs/src/.vuepress/styles) or for re-used components, see below

---

IMAGES (and other static resources)
Static files have to be placed in vuepress-docs/docs/src/.vuepress/public/
For images there is vuepress-docs/docs/src/.vuepress/public/images
If placed there, they can be used as described in markdown documentation, for example:
![alt text](images/somelogo.png)

---

COMPONENTS
Components are used for content elements which are not provided by markdown by default, for example for displaying sources / exchanges with logos, text, dynamic content etc
CAUTION: VuePress comes with many components and plugins which have not been tried out during first setup, so before coding our own check if what we need is out there

To examine how basic feature work we provide sample components in vuepress-docs/vuepress-docs/docs/src/.vuepress/components

HOW TO USE COMPONENTS
There are some samples:
- Sample component with "rich text content" (aka MarkDown Content)
Just add the following to your markdown:
<SampleComponentMarkdownContent>

### Example component with markdown content 
- Any markdown
- you put here
> will be slotted in 

</SampleComponentMarkdownContent>

- Sample component with Javascript execution and parameter content (only strings)
Just add the following to your markdown:

<SampleComponentJavascriptExecution display-text="parameter for button label" headlineText="parameter for headline" />
TODO: The sample component shows how javascript in components is executed and it also shows how parameter are passed to the component. However, passing a parameter to javascript execution is not implemented for now - there are many examples for that in the VuePress documentation tho

- Sample Component with conditions (content is only rendered if parameters are set, useful for configurable components)
<SampleComponentCondition MyConditionalParameter='Peter'>
  test content only shown if MyConditionalParameter == Peter
</SampleComponentCondition>

- Sample Component with for loop, works with lists as a parameter (can be used for asset- or exchange lists, could render icons and descriptions etc based on a list like "BTC,ETH")
<SampleComponentForLoop MyList="ListItem1,ListItems2" />

REAL DIA COMPONENTS
there are some components which are for real use, those follow the naming convention DIAComponent<descriptive name>
for example DIAComponentAssetListWithMarkdownContent: this takes a list of asset ids and markdown content and renders boxes with asset icons, descriptions etc
TODO: this is only technical proof of concept for now. it works with a demo list of asset ids as keys and asset names as values, to show how it works, need some more to be completely useful 

it can be used like
<DIAComponentAssetListWithMarkdownContent AssetList="BTC,ETH,DIA">
  ### Example component with markdown content 
- Any markdown
- you put here
> will be slotted in 
</DIAComponentAssetListWithMarkdownContent>
